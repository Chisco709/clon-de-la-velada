---
import "@fontsource-variable/jost"

interface Props {
  title: string;
}


const { title } = Astro.props
const descriptionPage =
  "Evento de boxeo entre streamers y creadores de contenido, organizado por Ibai Llanos"
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={descriptionPage} />
    <meta name="viewport" content="width=device-width" />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href="https://lavelada.es" />
    <title>{title}</title>
    <meta name="viewport" content="width=device-width" />
    <link rel="preload" as="image" href="/concrete.png" />
    <meta name="keywords" content="velada, streamers, creadores, Ibai, boxeo, midudev" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@infoLaVelada" />
    <meta name="twitter:creator" content="@ibai" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={descriptionPage} />
    <meta name="twitter:image" content="/og.jpg" />

    <meta name="og:image" content="/og.jpg" />
    <meta name="og:title" content={title} />
    <meta name="og:description" content={descriptionPage} />
    <meta name="og:url" content="https://lavelada.es" />
    <meta name="og:site_name" content="La Velada 4" />
    <meta name="og:type" content="website" />
    <meta name="og:locale" content="es_ES" />
    <meta name="robots" content="index, follow" />
    <meta name="googlebot" content="index, follow" />
  </head>
  <body>
    <canvas id="smoke-canvas" class="smoke-canvas"></canvas>
    <div id="content" class="max-w-6xl px-2 lg:px-10 pt-20 md:pt-32 mx-auto">
      <slot />
    </div>
  </body>
</html>

<script is:inline type="module">
  // detect support scroll timeline
  if (!("scrollTimeline" in window)) {
    import("https://flackr.github.io/scroll-timeline/dist/scroll-timeline.js")
  }
</script>

<style is:global>
  :root {
    --color-primary: #333;
    --color-secondary: #ddd;
    --color-twitch: #6441a4;

    --background-color: var(--color-secondary);
    --background-image: var(--background-color) url("/concrete.png") repeat;
  }

  .dark {
    --color-primary: #ddd;
    --color-secondary: #333;
    --color-twitch: #a270ff;

    --background-image: var(--background-color) url("/concrete-dark.png") repeat;
  }

  html {
    font-family: "Jost Variable", system-ui, sans-serif;
    background: var(--background-image);
    scroll-behavior: smooth;
    perspective: 2000px;
    overflow-x: hidden;
    overscroll-behavior: none;
  }

  /* Hiding class, making content visible only to screen readers but not visually */
  /* "sr" meaning "screen-reader" */
  .sr-only:not(:focus):not(:active) {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  ::-webkit-scrollbar {
    width: 10px;
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb {
    border-radius: 10px;
    background-color: theme("colors.primary");
    border: 2px solid transparent;
    background-clip: content-box;
  }

  ::-webkit-scrollbar-track {
    background: var(--background-image);
  }

  ::-webkit-scrollbar-corner {
    background: var(--background-image);
  }

  #content {
    position: relative;
    z-index: 2;
  }

  .smoke-canvas {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    z-index: 1;
  }
</style>

<script>
  import * as THREE from "three";

  let camera: THREE.PerspectiveCamera,
    scene: THREE.Scene,
    renderer: THREE.WebGLRenderer,
    particles: THREE.Mesh[],
    control,
    light: THREE.DirectionalLight,
    clock: THREE.Clock;
  const canvas = document.getElementById("smoke-canvas");

  init();

  function init() {
    clock = new THREE.Clock();

    renderer = new THREE.WebGLRenderer({
      canvas: canvas as HTMLElement,
    });

    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(
      50,
      window.innerWidth / window.innerHeight,
      1,
      200,
    );
    camera.position.z = 5;
    scene.add(camera);

    light = new THREE.DirectionalLight(0x333333, 2);
    light.position.set(-1, 0, 1);
    scene.add(light);

    const ambientLight = new THREE.AmbientLight(0xdddddd, 4);
    scene.add(ambientLight);

    const tex = new THREE.TextureLoader().load("/smoke.png");
    const material = new THREE.MeshLambertMaterial({
      color: 0xffffff,
      depthWrite: false,
      map: tex,
      transparent: true,
    });
    const geometry = new THREE.PlaneGeometry(5, 5);
    particles = [];

    const size = 7;

    for (let i = 0; i < 40; i++) {
      const particle = new THREE.Mesh(geometry, material);
      particle.position.set(
        (Math.random() - 0.5) * size,
        (Math.random() - 0.5) * size,
        (Math.random() - 0.5) * size,
      );
      particle.rotation.z = Math.random() * Math.PI * 2;
      scene.add(particle);
      particles.push(particle);
    }

    renderer.setAnimationLoop(update);
  }

  function update() {
    const dt = clock.getDelta();
    if (particles) {
      particles.forEach((particle) => {
        const z = particle.rotation.z;
        particle.lookAt(camera.position);
        particle.rotation.z = z + dt * 0.1;
      });
    }
    renderer.render(scene, camera);
  }
</script>
