<script>
    import * as THREE from "three"
    let camera: THREE.PerspectiveCamera
    let scene: THREE.Scene
    let renderer: THREE.WebGLRenderer
    let mesh: THREE.Mesh
    let clock: THREE.Clock
    let smokeParticles: THREE.Mesh[]
    init()
    animate()
    function init() {
        clock = new THREE.Clock()
        renderer = new THREE.WebGLRenderer({ alpha: true }) // Fondo transparente
        renderer.setSize(window.innerWidth, window.innerHeight) // Tamaño inicial igual al de la ventana
        renderer.setPixelRatio(window.devicePixelRatio)
        renderer.domElement.style.position = "fixed" // Posición fija
        scene = new THREE.Scene()
        camera = new THREE.PerspectiveCamera(
            75,
            window.innerWidth / window.innerHeight,
            1,
            10000
        )
        camera.position.z = 1000
        scene.add(camera)
        const geometry = new THREE.BoxGeometry(200, 200, 200)
        const material = new THREE.MeshLambertMaterial({
            color: 0xaa6666,
            wireframe: false
        })
        mesh = new THREE.Mesh(geometry, material)
        const light = new THREE.DirectionalLight(0xffffff, 0.5)
        light.position.set(-1, 1, 1)
        scene.add(light)
        const smokeTexture = new THREE.TextureLoader().load(
            "/Smoke.webp"
        )
        const smokeMaterial = new THREE.MeshBasicMaterial({
            map: smokeTexture,
            transparent: true,
            opacity: 0.5 // Ajusta la opacidad según lo necesites
        })
        const smokeGeo = new THREE.PlaneGeometry(
            window.innerWidth,
            window.innerHeight
        ) // Tamaño inicial igual al de la ventana
        smokeParticles = []
        for (let p = 0; p < 150; p++) {
            const particle = new THREE.Mesh(smokeGeo, smokeMaterial)
            particle.position.set(
                Math.random() * window.innerWidth - window.innerWidth / 2,
                Math.random() * window.innerHeight - window.innerHeight / 2,
                Math.random() * 1000 - 100
            )
            particle.rotation.z = Math.random() * 360
            scene.add(particle)
            smokeParticles.push(particle)
        }
        const miDiv = document.getElementById("miDiv")
        miDiv?.appendChild(renderer.domElement)
    }
    function animate() {
        const delta = clock.getDelta()
        requestAnimationFrame(animate)
        evolveSmoke(delta)
        render()
    }
    function evolveSmoke(delta: number) {
        smokeParticles.forEach(particle => {
            particle.rotation.z += delta * 0.5
        })
    }
    function render() {
        mesh.rotation.x += 0.01
        mesh.rotation.y += 0.02
        mesh.position.z =
            100 + Math.sin(clock.getElapsedTime() * 0.02) * 500
        camera.aspect = window.innerWidth / window.innerHeight
        camera.updateProjectionMatrix() // Actualizar la matriz de proyección de la cámara
        renderer.setSize(window.innerWidth, window.innerHeight) // Ajustar el tamaño del renderizador
        renderer.render(scene, camera)
    }
    // Manejar el evento de cambio de tamaño de la ventana
    window.addEventListener("resize", () => {
        camera.aspect = window.innerWidth / window.innerHeight
        camera.updateProjectionMatrix() // Actualizar la matriz de proyección de la cámara
        renderer.setSize(window.innerWidth, window.innerHeight) // Ajustar el tamaño del renderizador
    })
    </script>
       <div id="miDiv" class="absolute t-0 l-0  -z-[99999] dark:opacity-[0.3]">
       </div>