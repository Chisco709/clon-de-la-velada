---
import type { HTMLTag, Polymorphic } from "astro/types"

type Props<Tag extends HTMLTag> = Polymorphic<{
	as: Tag
	variant?: keyof typeof variantClasses
	color?: keyof typeof colorClasses
}>

const { as: Tag, class: className, variant, color, ...props } = Astro.props

const variantClasses = {
	h2: "text-lg font-medium uppercase lg:text-2xl",
	h3: "text-2xl font-semibold uppercase",
	body: "text-xl",
	medium: "text-md",
}

const colorClasses = {
	white: "text-white",
	black: "text-black",
	primary: "text-accent",
	neutral: "text-neutral-300",
}

const classes = [
	variantClasses[variant as keyof typeof variantClasses],
	colorClasses[color as keyof typeof colorClasses],
	className,
]
---

{
	Tag === "h2" && (
		<h2 class:list={[variantClasses.h2, className]} {...props}>
			<slot />
		</h2>
	)
}
{
	Tag === "h3" && (
		<h3 class:list={[variantClasses.h3, className]} {...props}>
			<slot />
		</h3>
	)
}

{
	Tag === "p" && (
		<p class:list={[variantClasses.body, className]} {...props}>
			<slot />
		</p>
	)
}

{
	Tag !== "h2" && Tag !== "h3" && Tag !== "p" && (
		<Tag class:list={classes} {...props}>
			<slot />
		</Tag>
	)
}
