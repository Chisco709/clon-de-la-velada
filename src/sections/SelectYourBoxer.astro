---
import Typography from "@/components/Typography.astro"
import { BOXERS } from "@/consts/boxers"
import { COUNTRIES } from "@/consts/countries"

const listOfBoxers = BOXERS.map((boxer) => {
	const { country } = boxer
	const countryName = COUNTRIES[country]?.name || ""
	return { ...boxer, countryName }
})
// el tiempo de transicion necesita la unidad por ello debe ser un string
const msFadeLuchador = "1s"
---

<section class="my-40">
	<Typography
		as="h3"
		variant="atomic-title"
		color="primary"
		class:list={"text-center"}
		id="selectedBoxer"
	>
		elige tu luchador
	</Typography>

	<div class="flex flex-col items-center justify-center gap-8">
		<article
			data-transition-duration={msFadeLuchador}
			class="relative flex w-full flex-col items-center justify-center"
			style="view-transition-name: boxer;"
		>
			<header
				class="relative flex w-full flex-col items-center justify-center bg-center bg-no-repeat"
				style="background-image: url('/img/effects/boxer-background.png'); background-size: 75%;"
			>
				<div class="fix-scanline relative		">
					<img
						class={`scanline relative boxer-photo h-auto object-contain transition duration-[${msFadeLuchador}] px-10 sm:px-0 sm:w-[30vw] xl:w-[19vw] 3xl:h-[600px] 3xl:w-[480px]`}
						alt="Fotografía de El Mariana"
						src="/img/boxers/el-mariana-big.webp"
						style="filter: drop-shadow(0 0 10px rgba(0, 0, 0, 1));"
					/>
				</div>
				<img
					class={`boxer-title pointer-events-none absolute bottom-14 h-auto transition duration-[${msFadeLuchador}] px-10 sm:px-0 sm:w-[30vw] xl:w-[19vw] 3xl:w-[480px]`}
					alt="El Mariana"
					src="/img/boxers/el-mariana-title.webp"
				/>
				<img
					class={`boxer-flag pointer-events-none aspect-[3/2] h-auto w-20 object-contain object-center transition duration-[${msFadeLuchador}] 3xl:w-24`}
					alt="Bandera de México"
					src="/img/flags/mx.webp"
				/>
			</header>

			<footer
				id="boxer-footer"
				class="absolute bottom-0 hidden w-full justify-between text-center text-white transition duration-200 xl:flex"
			>
				<div class="flex flex-col gap-y-2">
					<h4 class="text-lg">País</h4>
					<p class="text-lg font-bold">México</p>
					<a
						href="#"
						class="mt-10 inline-block font-semibold text-accent transition hover:scale-110"
					>
						Ver combate
					</a>
				</div>

				<div class="flex flex-col gap-y-2">
					<h4 class="text-lg">Peso</h4>
					<p class="text-lg font-bold">61 kg</p>
					<a
						href="#"
						class="mt-10 inline-block font-semibold text-accent transition hover:scale-110"
					>
						Ver perfil
					</a>
				</div>
			</footer>
		</article>
		<aside class="boxers-aside">
			<div class="blur"><div class="clip-black"></div></div>
			<nav class="boxers-nav">
				{
					listOfBoxers.map(({ id, name, country, countryName }) => (
						<button
							class="boxer-link"
							title={`Visita la página del boxeador ${name}`}
							data-id={id}
							data-name={name}
							data-country={country}
							data-country-name={countryName}
						>
							<div class="boxer-link-background" />
							<img
								loading="lazy"
								src={`/img/boxers/${id}-small.png`}
								alt={`Foto en pequeño del boxeador ${name}`}
								class="boxer-image"
							/>
						</button>
					))
				}
			</nav>
		</aside>
	</div>
</section>

<script>
	// const article = document.querySelector("article") as HTMLElement
	const boxerLinks = document.querySelectorAll(".boxer-link")
	const boxerTitle = document.querySelector(".boxer-title") as HTMLImageElement
	const boxerPhoto = document.querySelector(".boxer-photo") as HTMLImageElement
	const boxerCountry = document.querySelector(".boxer-flag") as HTMLImageElement

	const boxersNav = document.querySelector(".boxers-nav") as HTMLElement
		boxersNav?.addEventListener("click", (event) => {
		const target = event.target as HTMLElement

		if (target?.tagName !== "BUTTON" || target.dataset.selected === "true")
			return null

				boxerTitle.style.opacity = "0"
				boxerPhoto.style.opacity = "0"
				boxerCountry.style.opacity = "0"
				// no es necesario usar un timeout hay un evento para detectar la transicion
				const listenerTransition = () => {
					boxerTitle.removeEventListener("transitionend", listenerTransition)
					changeSelected(target.dataset)
				}
				boxerTitle.addEventListener("transitionend", listenerTransition)
	})
	function changeSelected(targetDataset: DOMStringMap) {
			const { id: idSel, name, country, countryName } = targetDataset
			const imagesToLoad = [boxerPhoto, boxerTitle, boxerCountry]
			boxerLinks.forEach((link) => {
				if (!(link instanceof HTMLElement))
					return
				if (link.dataset.id === idSel)
				{
					return	link.dataset.selected = "true"
					}
				link.dataset.selected = "false"
			})

			const ImagePromises = Promise.all(imagesToLoad.map((imageElem: HTMLImageElement) => new Promise(resolve => {
            imageElem.addEventListener("load", () => {
                resolve(imageElem)
            })
					}))
				)
				ImagePromises.then(() => {
					setDataSelected()
				})
				boxerPhoto.src = `/img/boxers/${idSel}-big.webp`
				boxerTitle.src = `/img/boxers/${idSel}-title.webp`
				boxerCountry.src = `/img/flags/${country}.webp`
				function setDataSelected() {
					boxerPhoto.alt = `Fotografía de ${name}`
					boxerTitle.alt = name!
					boxerCountry.alt = `Bandera de ${countryName}`

					boxerTitle.style.opacity = "1"
					boxerPhoto.style.opacity = "1"
					boxerCountry.style.opacity = "1"
					boxerTitle.style.opacity = "1"
					boxerPhoto.style.opacity = "1"
					boxerCountry.style.opacity = "1"
				}
	}
	const imagen = document.querySelector(".boxer-photo") as HTMLElement

	function asideAnimation(event: MouseEvent) {
		const rect = imagen.getBoundingClientRect()

		const aside = document.querySelector(".boxers-aside") as HTMLElement
		const blur = aside.querySelector(".blur") as HTMLElement
		const footer = document.querySelector("#boxer-footer") as HTMLElement

		const cursorPosY = event.clientY - rect.top
		console.log(cursorPosY > rect.height * 0.8)
		if (!(cursorPosY > rect.height * 1.2) && cursorPosY > rect.height * 0.7) {
			blur.style.opacity = "1"
			footer.style.opacity = "0"
			aside.classList.add("up")
		} else {
			footer.style.opacity = "1"
			blur.style.opacity = "0"
			aside.classList.remove("up")
		}
	}

	if (imagen) {
		imagen.addEventListener("mousemove", function (event: MouseEvent) {
			if (window.innerWidth > 1280) {
				asideAnimation(event)
			}
		})
	}
</script>

<style>
	.boxers-aside {
		display: flex;
		max-width: 100vw;
		height: 8rem;
		overflow-x: scroll;
		position: relative;
		scrollbar-width: none;
		transition: all 0.3s ease-in-out;
		.blur {
			opacity: 0;
			transition: opacity 0.3s ease-in-out;
			position: absolute;
			width: 100%;
			height: 100%;
			mask-image: linear-gradient(to bottom, transparent 0%, white 10%, white 100%);
			backdrop-filter: blur(10px);
			.clip-black {
				position: absolute;
				width: 100%;
				height: 100%;
				clip-path: polygon(100% 0, 0 0, 50% 100%);
				filter: blur(100px);
				background: linear-gradient(180deg, rgba(0, 0, 0, 0.8) 0%, rgba(0, 0, 0, 0) 100%);
			}
		}
	}

	.boxers-aside.up {
		margin-top: -20rem;
	}

	.boxers-nav {
		display: flex;
		gap: 2rem;
		height: 100%;
		transform:translate3d(0,0,0);
		padding: 1rem 5rem;
	}

	.boxer-link {
		position: relative;
		width: 10rem;
		max-width: 15rem;
		display: flex;
		align-items: center;
		flex-direction: column;
		transition: all 0.5s ease;
	}
		/* los hijos dan problemas al implementar la delegacion de eventos */
	.boxer-link > *{
		pointer-events: none;
	}

	.boxer-link-background {
		position: absolute;
		width: 100%;
		bottom: 0;
		display: block;
		background: linear-gradient(
			180deg,
			rgba(255, 255, 255, 1) 0%,
			rgba(255, 255, 255, 0.5) 30%,
			rgba(0, 0, 0, 0) 95%
		);
		opacity: 0.25;
		height: 60%;
		transition:
			all 0.3s ease-in-out,
			height 0.2s ease-in-out;
	}

	.boxers-aside.up .boxer-link-background {
		opacity: 0.5;
	}

	.boxer-link:hover {
		opacity: 0.9;
	}

	.boxer-image {
		z-index: 2;
		transition: all 0.3s ease-in-out;
		height: 100%;
	}

	.boxer-link:hover .boxer-image {
		transform: scale(1.1);
		margin-bottom: 5px;
	}

	@media (min-width: 1280px) {
		.boxers-aside {
			padding: 0.5rem 0;
			display: block;
			max-width: none;
			width: 100%;
			overflow: hidden;
			height: auto;
		}
		.boxers-nav {
			overflow: hidden;
			display: grid;
			padding: 1rem 0rem;
			@apply max-w-6xl gap-y-0;
			width: 100%;
			grid-template-columns: repeat(12, 1fr);
		}
		.boxer-link {
			@apply flex h-20 items-center justify-center;
			width: 100%;
			grid-column: span 2;

			&:nth-child(11n + 7) {
				grid-column-start: 2;
				grid-column-end: 4;
			}
		}

		.boxer-image {
			@apply h-full;
		}
	}
	/* Scanline Effect*/
	/* Scanline produce transparencia y se ve el fondo
		añadiendo un wrapper con sombra negra se evita
		que se vean los objetos detras
	*/
	.fix-scanline {
			filter: drop-shadow(0px 2px 0px);
	}
	.scanline {
		display:block;
		mask-image: linear-gradient(
			white,
			white 3px,
			transparent 3px,
			transparent 	9px
		);
		mask-size:100% 4px;
		animation:scan-flicker 4s infinite linear;
		mask-position: 0px 0px;
		transform:translate3d(0,0,0);
	}

	@keyframes scan-flicker {
		0% {
			mask-position: 0px 0px;
		}
		100% {
			mask-position: 0% 45px;
		}
	}

	/*
		se ha detectado un mal rendimiedo del aside
		hasta que se arregle lo desactivo en firefox
	*/
	@-moz-document url-prefix() {
		.scanline{
			animation: none;
		}
	}
	@media (prefers-reduced-motion) {
		.scanline{
			animation: none;
		}
	}
	/* fin Scanline Effect*/
	@media (max-width: 1650px) {
		.boxers-aside.up {
			margin-top: -15rem;
		}
	}
</style>
